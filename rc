" vim: set syntax=vim:

" Improved
set nocompatible

" Use UTF-8
set encoding=utf-8

" Enable syntax highlighting
syntax on

" Line number
set number

"Always show current position
set ruler

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Auto indent
set ai

" Wrap lines
set wrap

" Enable Backspace usage
set backspace=indent,eol,start

" Highlight trailing whitespace
set list
set listchars=tab:·\ ,trail:· "

" Swap files
set dir=~/.vim/.tmp/swp

" Undo files
set undofile
set undodir=~/.vim/.tmp/undo

" History
set viminfo+=n~/.vim/.tmp/viminfo
set history=1000

" Disable Oct Increment
set nrformats-=octal

" On save any: trim trailing whitespace
autocmd! BufWrite * mark ' | silent! %s/\s\+$// | norm ''

" Disable bell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" No scroll in GUI
set guioptions-=L

" Copy/Paste shortcuts
nmap <C-V> "+p
imap <C-V> <ESC><C-V>i
vmap <C-C> "+y

" Set color scheme that I like
if has("gui_running")
  colorscheme codeschool
else
  colorscheme default
endif

" Setup GUI
if has("gui_running")
  " Set window size
  set lines=54 columns=215

  " Remove menu bar
  set guioptions-=m

  " Remove toolbar
  set guioptions-=T

  " Remove right-hand scroll bar
  set guioptions-=r
endif

" Highlight long strings
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd VimEnter,WinEnter * match OverLength /\%81v.\+/

if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Treat long lines as break lines (useful when moving around in them)
noremap j gj
noremap k gk
noremap 0 g0
noremap $ g$

noremap <Up> gk
noremap <Down> gj
noremap <Home> g<Home>
noremap <End> g<End>

inoremap <Up> <C-o>gk
inoremap <Down> <C-o>gj
inoremap <Home> <C-o>g<Home>
inoremap <End> <C-o>g<End>

" Mappings to move lines
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Buffers
map <C-S-F12> :bufdo bd<CR>:NERDTree<CR>

" Syntax special mappings
au BufReadPost *.es6.erb set syntax=javascript
au BufReadPost *.slimbars set syntax=slim
au BufReadPost *.exs set syntax=elixir

"" Plugins

" Autoinstall
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins begin
call plug#begin('~/.vim/plugged')

" Global
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'scrooloose/nerdcommenter'

" FuzzyFinder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Plugins end
call plug#end()

" NERDTree
let g:NERDTreeChDirMode = 2 " Change dir globally (for fzf)
map <C-n> :NERDTreeToggle<CR>
if has("gui_running")
  " NERDTree buffer width
  let g:NERDTreeWinSize=41
  " Auto open NERDTree
  au VimEnter *  NERDTree
else
  let g:NERDTreeWinSize=22
end

" FuzzyFinder
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

nnoremap <silent> <C-b> :call FZFOpen(':Buffers')<CR>
nnoremap <silent> <C-l> :call FZFOpen(':BLines')<CR>
nnoremap <silent> <C-f> :call FZFOpen(':GFiles')<CR>
nnoremap <silent> <C-g> :call FZFOpen(':Rg')<CR>

" Vim Markdown
let g:vim_markdown_folding_disabled = 1

" Vim GitGutter
let g:gitgutter_override_sign_column_highlight = 0
set signcolumn=yes
highlight clear SignColumn
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" NerdCommenter
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv

" Global search
nnoremap \ :execute 'Rg' expand('<cword>')<CR>

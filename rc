" vim: set syntax=vim:

" Improved
set nocompatible

" Use UTF-8
set encoding=utf-8

" Enable syntax highlighting
syntax on

" Line number
set number

"Always show current position
set ruler

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Auto indent
set ai

" Wrap lines
set wrap

" Enable Backspace usage
set backspace=indent,eol,start

" Highlight trailing whitespace
set list
set listchars=tab:·\ ,trail:· "

" Swap files
set dir=~/.vim/.tmp/swp

" Undo files
set undofile
set undodir=~/.vim/.tmp/undo

" History
set viminfo+=n~/.vim/.tmp/viminfo
set history=1000

" On save any: trim trailing whitespace
autocmd! BufWrite * mark ' | silent! %s/\s\+$// | norm ''

" Disable bell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" No scroll in GUI
set guioptions-=L

" Copy/Paste shortcuts
nmap <C-V> "+p
imap <C-V> <ESC><C-V>i
vmap <C-C> "+y

" Set color scheme that I like
if has("gui_running")
  colorscheme codeschool
else
  colorscheme default
endif

" Setup GUI
if has("gui_running")
  " Set window size
  set lines=54 columns=215

  " Remove menu bar
  set guioptions-=m

  " Remove toolbar
  set guioptions-=T

  " Remove right-hand scroll bar
  set guioptions-=r
endif

" Highlight long strings
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd VimEnter,WinEnter * match OverLength /\%81v.\+/

if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Treat long lines as break lines (useful when moving around in them)
noremap j gj
noremap k gk
noremap 0 g0
noremap $ g$

noremap <Up> gk
noremap <Down> gj
noremap <Home> g<Home>
noremap <End> g<End>

inoremap <Up> <C-o>gk
inoremap <Down> <C-o>gj
inoremap <Home> <C-o>g<Home>
inoremap <End> <C-o>g<End>

" Mappings to move lines
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Vundle bundles list
Plugin 'scrooloose/nerdtree'
Plugin 'embear/vim-localvimrc'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Rails
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-cucumber'
Plugin 'slim-template/vim-slim'
Plugin 'kchmck/vim-coffee-script'

" Node
Plugin 'moll/vim-node'
Plugin 'wavded/vim-stylus'
Plugin 'digitaltoad/vim-pug'
Plugin 'leafgarland/typescript-vim'
Plugin 'nikvdp/ejs-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" Elixir
Plugin 'jimenezrick/vimerl'
Plugin 'elixir-lang/vim-elixir'
Plugin 'avdgaag/vim-phoenix'

" Prolog
Plugin 'adimit/prolog.vim'

" Elm
Plugin 'ElmCast/elm-vim'

" Vundle end
call vundle#end()
filetype plugin indent on

" NERDTree
if has("gui_running")
  " NERDTree buffer width
  let g:NERDTreeWinSize=41
  " Auto open NERDTree
  au VimEnter *  NERDTree
else
  let g:NERDTreeWinSize=22
end

" Local .vimrc
let g:localvimrc_ask=0

" Vim Markdown
let g:vim_markdown_folding_disabled = 1

" Vim GitGutter
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_sign_column_always = 1
hi SignColumn ctermbg=16 guibg=#2a343a

" Syntax
au BufReadPost *.es6.erb set syntax=javascript
au BufReadPost *.slimbars set syntax=slim
